apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "vaultwarden.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: vaultwarden
    {{- include "vaultwarden.labels" . | nindent 4 }}
    {{- range $key, $value := .Values.statefulsetlabels }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
    {{- end }}
  {{- with .Values.statefulsetAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  serviceName: vaultwarden
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: vaultwarden
      {{- include "vaultwarden.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: vaultwarden
        {{- include "vaultwarden.selectorLabels" . | nindent 8 }}
      {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha1sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha1sum }}
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: vaultwarden
          envFrom:
            - configMapRef:
                name: {{ include "vaultwarden.fullname" . }}
          env:
            {{- if or (.Values.smtp.username.value) (.Values.smtp.username.existingSecretKey )}}
            - name: SMTP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "vaultwarden.fullname" .) .Values.smtp.existingSecret }}
                  key: {{ default "SMTP_USERNAME" .Values.smtp.username.existingSecretKey }}
            {{- end }}
            {{- if or (.Values.smtp.password.value) (.Values.smtp.password.existingSecretKey )}}
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "vaultwarden.fullname" .) .Values.smtp.existingSecret }}
                  key: {{ default "SMTP_PASSWORD" .Values.smtp.password.existingSecretKey }}
            {{- end }}
            {{- if .Values.adminToken }}
            - name: ADMIN_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "vaultwarden.fullname" .) .Values.adminToken.existingSecret }}
                  key: {{ default "ADMIN_TOKEN" .Values.adminToken.existingSecretKey }}
            {{- else }}
            - name: DISABLE_ADMIN_TOKEN
              value: "true"
            {{- end }}
            {{- if ne "default" .Values.database.type }}
            - name: DATABASE_URL
              {{- if .Values.database.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.existingSecret }}
                  key: {{ .Values.database.existingSecretKey }}
              {{- else }}
              {{- if .Values.database.uriOverride }}
              value: {{ .Values.database.uriOverride }}
              {{- else }}
              value: {{ include "dbString" . | quote }}
              {{- end }}
              {{- end }}
            {{- end }}
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: {{ .Values.websocket.port }}
              name: websocket
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /alive
              port: 8080
              initialDelaySeconds: 5
          {{- if .Values.data }}
          volumeMounts:
            - name: {{ .Values.data.name }}
              mountPath: {{ default "/data" .Values.data.path }}
          {{- end }}
          {{- if .Values.attachments }}
          volumeMounts:
            - name: {{ .Values.attachments.name }}
              mountPath: {{ default "/data/attachments" .Values.attachments.path }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.sidecars }}
        {{- toYaml .Values.sidecars | nindent 8 }}
        {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- end }}
  {{- if (or .Values.data .Values.attachments) }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  volumeClaimTemplates:
    {{- if .Values.data }}
    - metadata:
        name: {{ .Values.data.name }}
        labels:
          {{- include "vaultwarden.labels" . | nindent 10 }}
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.data.size }}
        {{- if .Values.data.class }}
        storageClassName: {{ .Values.data.class | quote }}
        {{- end }}
    {{- end }}
    {{- if .Values.attachments }}
    - metadata:
        name: {{ .Values.attachments.name }}
        labels:
          {{- include "vaultwarden.labels" . | nindent 10 }}
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.attachments.size }}
        {{- if .Values.attachments.class }}
        storageClassName: {{ .Values.attachments.class | quote }}
        {{- end }}
    {{- end }}
  {{- end }}
